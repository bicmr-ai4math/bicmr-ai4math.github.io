import{_ as n,v as l,b as e,R as t,F as a,L as s}from"./chunks/framework.db3115df.js";const S=JSON.parse('{"title":"基于依赖类型论的定理证明器实现简介","description":"","frontmatter":{},"headers":[],"relativePath":"draft/impl.md","filePath":"draft/impl.md"}'),m={name:"draft/impl.md"},r=t('<h1 id="基于依赖类型论的定理证明器实现简介" tabindex="-1">基于依赖类型论的定理证明器实现简介 <a class="header-anchor" href="#基于依赖类型论的定理证明器实现简介" aria-label="Permalink to &quot;基于依赖类型论的定理证明器实现简介&quot;">​</a></h1><p>本文旨在介绍一些有关基于依赖类型论的定理证明器实现的经典技术、问题、定义与例子。 由于编写时间与篇幅受限，且存在相关材料已经给出了经典的论述，定义与例子的叙述会相对不详细与形式化。此时需要从所引用的文本中阅读对应的内容。 依赖类型论为实现更接近日常数学所用的定理证明器提供了新的基础。「命题即类型，证明即程序，证明化简即程序求值」的对应为数学语言与计算机语言的合一化提供了自然的形式化思路。<a href="https://homepages.inf.ed.ac.uk/wadler/papers/propositions-as-types/propositions-as-types.pdf" target="_blank" rel="noreferrer">Propositions as Types</a></p><p>从而，检查证明步骤的正确性的问题便转化为了检查程序类型的工作。</p><p>依赖类型论的程序类型检查并不容易，需要相对较久的时间：</p><ul><li>类型检查中涉及求值操作</li><li>应当允许用户在一些地方不将类型写完全或省略类型</li><li>无处不在的依赖类型模式匹配</li><li>常使用 ad-hoc 多态</li><li>常使用 tactics 来生成 terms</li><li>较为复杂的类型论（如同伦类型论的可计算解释的实现）有关原始对象的操作是非平凡的 <a href="https://thehighergeometer.wordpress.com/2021/09/14/a-new-brunerie-number-might-be-easier-to-calculate/" target="_blank" rel="noreferrer">A new “Brunerie number”, might be easier to calculate?</a></li></ul><p>也有一些在数学上较为成功的定理证明器是基于非依赖类型论的，或者说，相对「简单」的类型论。<a href="https://arxiv.org/abs/1804.07860" target="_blank" rel="noreferrer">Formalising Mathematics In Simple Type Theory</a></p><p>由于它们的实现关注点与基于依赖类型论的定理证明器有较大差别，在本文中我们不会介绍。 另外，一些比较经典的编译器议题虽然会影响定理证明器的性能与运行速度，但由于太通用或已经被研究较深（如 parsing），在本文中也不会加以介绍。</p><p>本文对技术的介绍有一定的选择性，能达到同样目的的多个手段可能只会介绍一个。本文关注技术手段在当下流行的定理证明器中的具体实现。 基于各种依赖类型论变体的 Coq、Agda、Lean 都是当下相对流行，且在数学上取得一定成就的定理证明器。效率与表达能力也是它们关心的主要议题之一。 在下面的介绍中，或多或少会出现它们发展的轨迹。</p><h2 id="主要环节" tabindex="-1">主要环节 <a class="header-anchor" href="#主要环节" aria-label="Permalink to &quot;主要环节&quot;">​</a></h2><p>我们在这里使用「环节」而不是「流程」，是因为这些概念可能是同时或重叠发生的。由于文本总是线性的叙述，我们从「不清楚类型检查是什么」的设定开始介绍。</p><p>我们所讨论的的技术主要适用于实现 <a href="https://plato.stanford.edu/entries/type-theory-intuitionistic/" target="_blank" rel="noreferrer">Martin-Löf type theory</a>（MLTT）及变体。有关介绍 MLTT 的内容浩如烟海，可以参考主流的一些类型论教材。在实现更为复杂的类型论，如 <a href="https://arxiv.org/abs/1611.02108" target="_blank" rel="noreferrer">Cubical Type Theory</a> 时，虽然本文介绍的内容仍然有相当大一部分能适用，但一些额外的实现需求与策略也需要注意。<a href="https://github.com/AndrasKovacs/cctt" target="_blank" rel="noreferrer">cctt</a></p><p>此外，有一些关于 MLTT 及变体实现相关性能研究的资料：</p><ul><li><a href="https://github.com/AndrasKovacs/normalization-bench" target="_blank" rel="noreferrer">Normalization Bench</a></li><li><a href="https://github.com/AndrasKovacs/smalltt" target="_blank" rel="noreferrer">smalltt</a></li><li><a href="https://github.com/ollef/sixty" target="_blank" rel="noreferrer">sixty</a></li></ul><h3 id="typing" tabindex="-1">Typing <a class="header-anchor" href="#typing" aria-label="Permalink to &quot;Typing&quot;">​</a></h3>',14),i=a("p",null,[s("类型检查关注一个给定的项 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"x")]),a("annotation",{encoding:"application/x-tex"},"x")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal"},"x")])])]),s(" 在给定的上下文 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"Γ")]),a("annotation",{encoding:"application/x-tex"},"\\Gamma")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord"},"Γ")])])]),s(" 中是否属于一个给定的类型 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"A")]),a("annotation",{encoding:"application/x-tex"},"A")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord mathnormal"},"A")])])]),s("，计作 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"Γ"),a("mo",null,"⊢"),a("mi",null,"x"),a("mo",null,":"),a("mi",null,"A")]),a("annotation",{encoding:"application/x-tex"},"\\Gamma \\vdash x : A")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord"},"Γ"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"⊢"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal"},"x"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord mathnormal"},"A")])])]),s("。 类型检查是通过将推演规则（derivation rules）应用到语法上，得到完整推演过程的机械化操作，可以使用算法进行描述。 最简陋的类型检查算法只关心推演规则中每个类型的形成规则、引入规则与消去规则（与必要的逻辑规则，如上下文有关的操作）。简单的类型检查的例子参见 "),a("a",{href:"https://www.cambridge.org/core/books/type-theory-and-formal-proof/0472640AAD34E045C7F140B46A57A67C",target:"_blank",rel:"noreferrer"},[s("Type Theory and Formal Proof, Ch2 Sec8 Type Checking in "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("msub",null,[a("mi",null,"λ"),a("mo",{lspace:"0em",rspace:"0em"},"→")])]),a("annotation",{encoding:"application/x-tex"},"\\lambda_{\\to}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8444em","vertical-align":"-0.15em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"λ"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.1068em"}},[a("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mrel mtight"},"→")])])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.15em"}},[a("span")])])])])])])])])]),s(" 与 "),a("a",{href:"https://plfa.github.io/Lambda/",target:"_blank",rel:"noreferrer"},"Programming Language Foundations in Agda: Lambda"),s("； 较为先进的类型检查算法除了能自动插入一些隐式参数与根据上下文求解用户没有显式写出的内容。 因此，除了每个类型的形成规则、引入规则与消去规则外，较为先进的类型检查算法还关心推演规则中的一些有关类型的其他性质。")],-1),c=a("p",null,[s("非形式化地讲，在相对简单的类型理论 —— 如 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("msub",null,[a("mi",null,"λ"),a("mrow",null,[a("mo",null,"→"),a("mo",null,"×"),a("mi",{mathvariant:"double-struck"},"N")])])]),a("annotation",{encoding:"application/x-tex"},"\\lambda_{\\to \\times \\mathbb N}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.9028em","vertical-align":"-0.2083em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"λ"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.3322em"}},[a("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mrel mtight"},"→"),a("span",{class:"mord mtight"},"×"),a("span",{class:"mord mathbb mtight"},"N")])])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.2083em"}},[a("span")])])])])])])])]),s("（即有函数类型、Cartesian 积与自然数的类型论）—— 中，去描述类型检查的过程是相对容易的。 例如，对于项 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"f"),a("mo",null,":"),a("mo",null,"="),a("mi",null,"λ"),a("mo",{stretchy:"false"},"("),a("mi",null,"x"),a("mo",{separator:"true"},","),a("mi",null,"y"),a("mo",{stretchy:"false"},")"),a("mi",{mathvariant:"normal"},"."),a("mo",{stretchy:"false"},"("),a("mi",null,"y"),a("mo",{separator:"true"},","),a("mn",null,"0"),a("mo",{stretchy:"false"},")")]),a("annotation",{encoding:"application/x-tex"},"f := \\lambda (x, y) . (y, 0)")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord mathnormal"},"λ"),a("span",{class:"mopen"},"("),a("span",{class:"mord mathnormal"},"x"),a("span",{class:"mpunct"},","),a("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),a("span",{class:"mclose"},")"),a("span",{class:"mord"},"."),a("span",{class:"mopen"},"("),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),a("span",{class:"mpunct"},","),a("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),a("span",{class:"mord"},"0"),a("span",{class:"mclose"},")")])])]),s("，要检查 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"Γ"),a("mo",{separator:"true"},","),a("mi",null,"x"),a("mo",null,":"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",{separator:"true"},","),a("mi",null,"y"),a("mo",null,":"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",null,"⊢"),a("mi",null,"f"),a("mo",null,":"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",null,"×"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",null,"→"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",null,"×"),a("mi",{mathvariant:"double-struck"},"N")]),a("annotation",{encoding:"application/x-tex"},"\\Gamma, x : \\mathbb N, y : \\mathbb N \\vdash f : \\mathbb N \\times \\mathbb N \\to \\mathbb N \\times \\mathbb N")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8778em","vertical-align":"-0.1944em"}}),a("span",{class:"mord"},"Γ"),a("span",{class:"mpunct"},","),a("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),a("span",{class:"mord mathnormal"},"x"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8833em","vertical-align":"-0.1944em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mpunct"},","),a("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"⊢"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7722em","vertical-align":"-0.0833em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"×"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6889em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"→"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7722em","vertical-align":"-0.0833em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"×"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6889em"}}),a("span",{class:"mord mathbb"},"N")])])]),s("，即写出它的完整推演：")],-1),p=a("ul",null,[a("li",null,[s("对于 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mn",null,"0")]),a("annotation",{encoding:"application/x-tex"},"0")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"0")])])]),s("，考虑 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"double-struck"},"N")]),a("annotation",{encoding:"application/x-tex"},"\\mathbb N")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6889em"}}),a("span",{class:"mord mathbb"},"N")])])]),s(" 的引入规则，有 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"∅"),a("mo",null,"⊢"),a("mn",null,"0"),a("mo",null,":"),a("mi",{mathvariant:"double-struck"},"N")]),a("annotation",{encoding:"application/x-tex"},"\\empty \\vdash 0 : \\mathbb N")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8056em","vertical-align":"-0.0556em"}}),a("span",{class:"mord"},"∅"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"⊢"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"0"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6889em"}}),a("span",{class:"mord mathbb"},"N")])])])]),a("li",null,[s("对于 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"y")]),a("annotation",{encoding:"application/x-tex"},"y")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y")])])]),s("，由于上下文中有 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"y"),a("mo",null,":"),a("mi",{mathvariant:"double-struck"},"N")]),a("annotation",{encoding:"application/x-tex"},"y : \\mathbb N")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6889em"}}),a("span",{class:"mord mathbb"},"N")])])]),s("，有 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"y"),a("mo",null,":"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",null,"⊢"),a("mi",null,"y"),a("mo",null,":"),a("mi",{mathvariant:"double-struck"},"N")]),a("annotation",{encoding:"application/x-tex"},"y : \\mathbb N \\vdash y : \\mathbb N")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"⊢"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6889em"}}),a("span",{class:"mord mathbb"},"N")])])])]),a("li",null,[s("对于 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",{stretchy:"false"},"("),a("mi",null,"y"),a("mo",{separator:"true"},","),a("mn",null,"0"),a("mo",{stretchy:"false"},")")]),a("annotation",{encoding:"application/x-tex"},"(y, 0)")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mopen"},"("),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),a("span",{class:"mpunct"},","),a("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),a("span",{class:"mord"},"0"),a("span",{class:"mclose"},")")])])]),s("，考虑 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",null,"×")]),a("annotation",{encoding:"application/x-tex"},"\\times")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},"×")])])]),s(" 的引入规则 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",{stretchy:"false"},"("),a("mi",{mathvariant:"normal"},"_"),a("mo",{separator:"true"},","),a("mi",{mathvariant:"normal"},"_"),a("mo",{stretchy:"false"},")")]),a("annotation",{encoding:"application/x-tex"},"(\\_,\\_)")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1.06em","vertical-align":"-0.31em"}}),a("span",{class:"mopen"},"("),a("span",{class:"mord",style:{"margin-right":"0.02778em"}},"_"),a("span",{class:"mpunct"},","),a("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),a("span",{class:"mord",style:{"margin-right":"0.02778em"}},"_"),a("span",{class:"mclose"},")")])])]),s("，有 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"y"),a("mo",null,":"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",null,"⊢"),a("mo",{stretchy:"false"},"("),a("mi",null,"y"),a("mo",{separator:"true"},","),a("mi",{mathvariant:"normal"},"_"),a("mo",{stretchy:"false"},")"),a("mo",null,":"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",null,"×"),a("mi",{mathvariant:"normal"},"_")]),a("annotation",{encoding:"application/x-tex"},"y : \\mathbb N \\vdash (y, \\_) : \\mathbb N \\times \\_")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"⊢"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1.06em","vertical-align":"-0.31em"}}),a("span",{class:"mopen"},"("),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),a("span",{class:"mpunct"},","),a("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),a("span",{class:"mord",style:{"margin-right":"0.02778em"}},"_"),a("span",{class:"mclose"},")"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7722em","vertical-align":"-0.0833em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"×"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em","vertical-align":"-0.31em"}}),a("span",{class:"mord",style:{"margin-right":"0.02778em"}},"_")])])]),s("，进一步有 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"y"),a("mo",null,":"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",null,"⊢"),a("mo",{stretchy:"false"},"("),a("mi",null,"y"),a("mo",{separator:"true"},","),a("mn",null,"0"),a("mo",{stretchy:"false"},")"),a("mo",null,":"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",null,"×"),a("mi",{mathvariant:"double-struck"},"N")]),a("annotation",{encoding:"application/x-tex"},"y : \\mathbb N \\vdash (y, 0) : \\mathbb N \\times \\mathbb N")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"⊢"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mopen"},"("),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),a("span",{class:"mpunct"},","),a("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),a("span",{class:"mord"},"0"),a("span",{class:"mclose"},")"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7722em","vertical-align":"-0.0833em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"×"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6889em"}}),a("span",{class:"mord mathbb"},"N")])])])]),a("li",null,[s("对于 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"λ"),a("mo",{stretchy:"false"},"("),a("mi",null,"x"),a("mo",{separator:"true"},","),a("mi",null,"y"),a("mo",{stretchy:"false"},")"),a("mi",{mathvariant:"normal"},"."),a("mo",{stretchy:"false"},"("),a("mi",null,"y"),a("mo",{separator:"true"},","),a("mn",null,"0"),a("mo",{stretchy:"false"},")")]),a("annotation",{encoding:"application/x-tex"},"\\lambda (x, y) . (y, 0)")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord mathnormal"},"λ"),a("span",{class:"mopen"},"("),a("span",{class:"mord mathnormal"},"x"),a("span",{class:"mpunct"},","),a("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),a("span",{class:"mclose"},")"),a("span",{class:"mord"},"."),a("span",{class:"mopen"},"("),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),a("span",{class:"mpunct"},","),a("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),a("span",{class:"mord"},"0"),a("span",{class:"mclose"},")")])])]),s("，由于 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"y"),a("mo",null,":"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",null,"⊢"),a("mo",{stretchy:"false"},"("),a("mi",null,"y"),a("mo",{separator:"true"},","),a("mn",null,"0"),a("mo",{stretchy:"false"},")"),a("mo",null,":"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",null,"×"),a("mi",{mathvariant:"double-struck"},"N")]),a("annotation",{encoding:"application/x-tex"},"y : \\mathbb N \\vdash (y, 0) : \\mathbb N \\times \\mathbb N")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"⊢"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mopen"},"("),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),a("span",{class:"mpunct"},","),a("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),a("span",{class:"mord"},"0"),a("span",{class:"mclose"},")"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7722em","vertical-align":"-0.0833em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"×"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6889em"}}),a("span",{class:"mord mathbb"},"N")])])]),s("，考虑 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",null,"→")]),a("annotation",{encoding:"application/x-tex"},"\\to")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.3669em"}}),a("span",{class:"mrel"},"→")])])]),s(" 的引入规则 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"λ")]),a("annotation",{encoding:"application/x-tex"},"\\lambda")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord mathnormal"},"λ")])])]),s(" 与 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",null,"×")]),a("annotation",{encoding:"application/x-tex"},"\\times")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},"×")])])]),s(" 的引入规则 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",{stretchy:"false"},"("),a("mi",{mathvariant:"normal"},"_"),a("mo",{separator:"true"},","),a("mi",{mathvariant:"normal"},"_"),a("mo",{stretchy:"false"},")")]),a("annotation",{encoding:"application/x-tex"},"(\\_,\\_)")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1.06em","vertical-align":"-0.31em"}}),a("span",{class:"mopen"},"("),a("span",{class:"mord",style:{"margin-right":"0.02778em"}},"_"),a("span",{class:"mpunct"},","),a("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),a("span",{class:"mord",style:{"margin-right":"0.02778em"}},"_"),a("span",{class:"mclose"},")")])])]),s("，有 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"x"),a("mo",null,":"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",{separator:"true"},","),a("mi",null,"y"),a("mo",null,":"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",null,"⊢"),a("mo",{stretchy:"false"},"("),a("mi",null,"x"),a("mo",{separator:"true"},","),a("mi",null,"y"),a("mo",{stretchy:"false"},")"),a("mo",null,":"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",null,"×"),a("mi",{mathvariant:"double-struck"},"N")]),a("annotation",{encoding:"application/x-tex"},"x : \\mathbb N, y : \\mathbb N \\vdash (x, y) : \\mathbb N \\times \\mathbb N")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal"},"x"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8833em","vertical-align":"-0.1944em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mpunct"},","),a("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"⊢"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mopen"},"("),a("span",{class:"mord mathnormal"},"x"),a("span",{class:"mpunct"},","),a("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),a("span",{class:"mclose"},")"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7722em","vertical-align":"-0.0833em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"×"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6889em"}}),a("span",{class:"mord mathbb"},"N")])])]),s("，进一步 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"x"),a("mo",null,":"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",{separator:"true"},","),a("mi",null,"y"),a("mo",null,":"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",null,"⊢"),a("mi",null,"λ"),a("mo",{stretchy:"false"},"("),a("mi",null,"x"),a("mo",{separator:"true"},","),a("mi",null,"y"),a("mo",{stretchy:"false"},")"),a("mi",{mathvariant:"normal"},"."),a("mi",{mathvariant:"normal"},"_"),a("mo",null,":"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",null,"×"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",null,"→"),a("mi",{mathvariant:"normal"},"_")]),a("annotation",{encoding:"application/x-tex"},"x : \\mathbb N, y : \\mathbb N \\vdash \\lambda (x, y) . \\_ : \\mathbb N \\times \\mathbb N \\to \\_")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal"},"x"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8833em","vertical-align":"-0.1944em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mpunct"},","),a("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"⊢"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1.06em","vertical-align":"-0.31em"}}),a("span",{class:"mord mathnormal"},"λ"),a("span",{class:"mopen"},"("),a("span",{class:"mord mathnormal"},"x"),a("span",{class:"mpunct"},","),a("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),a("span",{class:"mclose"},")"),a("span",{class:"mord",style:{"margin-right":"0.02778em"}},"._"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7722em","vertical-align":"-0.0833em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"×"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6889em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"→"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em","vertical-align":"-0.31em"}}),a("span",{class:"mord",style:{"margin-right":"0.02778em"}},"_")])])]),s("，进一步有 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"Γ"),a("mo",{separator:"true"},","),a("mi",null,"x"),a("mo",null,":"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",{separator:"true"},","),a("mi",null,"y"),a("mo",null,":"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",null,"⊢"),a("mi",null,"f"),a("mo",null,":"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",null,"×"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",null,"→"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",null,"×"),a("mi",{mathvariant:"double-struck"},"N")]),a("annotation",{encoding:"application/x-tex"},"\\Gamma, x : \\mathbb N, y : \\mathbb N \\vdash f : \\mathbb N \\times \\mathbb N \\to \\mathbb N \\times \\mathbb N")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8778em","vertical-align":"-0.1944em"}}),a("span",{class:"mord"},"Γ"),a("span",{class:"mpunct"},","),a("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),a("span",{class:"mord mathnormal"},"x"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8833em","vertical-align":"-0.1944em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mpunct"},","),a("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"⊢"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7722em","vertical-align":"-0.0833em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"×"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6889em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"→"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7722em","vertical-align":"-0.0833em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"×"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6889em"}}),a("span",{class:"mord mathbb"},"N")])])])])],-1),h=a("p",null,[s("对于项 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"x"),a("mi",{mathvariant:"normal"},"s")]),a("mo",null,":"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",null,"×"),a("mi",{mathvariant:"double-struck"},"N")]),a("annotation",{encoding:"application/x-tex"},"\\mathrm{xs} : \\mathbb N \\times \\mathbb N")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathrm"},"xs")]),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7722em","vertical-align":"-0.0833em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"×"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6889em"}}),a("span",{class:"mord mathbb"},"N")])])]),s("，要检查 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"Γ"),a("mo",null,"⊢"),a("mi",null,"f"),a("mtext",null," "),a("mrow",null,[a("mi",{mathvariant:"normal"},"x"),a("mi",{mathvariant:"normal"},"s")]),a("mo",null,":"),a("mi",{mathvariant:"double-struck"},"N"),a("mo",null,"×"),a("mi",{mathvariant:"double-struck"},"N")]),a("annotation",{encoding:"application/x-tex"},"\\Gamma \\vdash f\\ \\mathrm{xs} : \\mathbb N \\times \\mathbb N")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord"},"Γ"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"⊢"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),a("span",{class:"mspace"}," "),a("span",{class:"mord"},[a("span",{class:"mord mathrm"},"xs")]),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7722em","vertical-align":"-0.0833em"}}),a("span",{class:"mord mathbb"},"N"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"×"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6889em"}}),a("span",{class:"mord mathbb"},"N")])])]),s("，只需要考虑 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",null,"→")]),a("annotation",{encoding:"application/x-tex"},"\\to")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.3669em"}}),a("span",{class:"mrel"},"→")])])]),s(" 的消去规则。")],-1),o=a("p",null,"从上面的例子，我们可以注意到：",-1),g=a("ul",null,[a("li",null,[a("p",null,[s("在简单的类型系统中，复杂的类型是由基础类型（此处为 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"double-struck"},"N")]),a("annotation",{encoding:"application/x-tex"},"\\mathbb N")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6889em"}}),a("span",{class:"mord mathbb"},"N")])])]),s("）、类型构造子（此处为分别接受两个参数的 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",null,"→")]),a("annotation",{encoding:"application/x-tex"},"\\to")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.3669em"}}),a("span",{class:"mrel"},"→")])])]),s(" 与 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",null,"×")]),a("annotation",{encoding:"application/x-tex"},"\\times")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},"×")])])]),s("），通过有限次应用组合而成。对应的类型检查也跟随组合的风格，首先对 subterm 进行检查，再应用推演规则来组合成完整的推演过程。")])]),a("li",null,[a("p",null,[s("一些项即使不标注类型，我们也能合成出它所属于的类型。这样的操作被称为类型合成。考虑这样的表述：对于 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"Γ"),a("mo",null,"⊢"),a("mi",null,"x"),a("mo",null,":"),a("mi",null,"A")]),a("annotation",{encoding:"application/x-tex"},"\\Gamma \\vdash x : A")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord"},"Γ"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"⊢"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal"},"x"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord mathnormal"},"A")])])]),s("，如果三元组 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",{stretchy:"false"},"("),a("mi",{mathvariant:"normal"},"Γ"),a("mo",{separator:"true"},","),a("mi",null,"x"),a("mo",{separator:"true"},","),a("mi",null,"A"),a("mo",{stretchy:"false"},")")]),a("annotation",{encoding:"application/x-tex"},"(\\Gamma, x, A)")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mopen"},"("),a("span",{class:"mord"},"Γ"),a("span",{class:"mpunct"},","),a("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),a("span",{class:"mord mathnormal"},"x"),a("span",{class:"mpunct"},","),a("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),a("span",{class:"mord mathnormal"},"A"),a("span",{class:"mclose"},")")])])]),s(" 的所有元素都被给出，写出完整推演过程被称为类型检查；如果缺失类型 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",{stretchy:"false"},"("),a("mi",{mathvariant:"normal"},"Γ"),a("mo",{separator:"true"},","),a("mi",null,"x"),a("mo",{separator:"true"},","),a("mi",{mathvariant:"normal"},"_"),a("mo",{stretchy:"false"},")")]),a("annotation",{encoding:"application/x-tex"},"(\\Gamma, x, \\_)")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1.06em","vertical-align":"-0.31em"}}),a("span",{class:"mopen"},"("),a("span",{class:"mord"},"Γ"),a("span",{class:"mpunct"},","),a("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),a("span",{class:"mord mathnormal"},"x"),a("span",{class:"mpunct"},","),a("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),a("span",{class:"mord",style:{"margin-right":"0.02778em"}},"_"),a("span",{class:"mclose"},")")])])]),s("，写出合成缺失类型的推演过程被称为类型合成。类型检查与类型合成合称 typing。在这一领域有优秀的综述 "),a("a",{href:"https://arxiv.org/abs/1908.05839",target:"_blank",rel:"noreferrer"},"Bidirectional Typing"),s("。有关 typing 理论的一个重要推论是，易用定理证明器的 typing 能力需要满足用户只需要显式为 top-level 的定义与引入规则消除规则相接出现的定义标注类型，其他部分项定义的类型可以不用被标注。")])])],-1),u=a("p",null,[s("综述 Bidirectional Typing 与同名的 typing 策略指出，一些项的类型是适合被检查的，一些项的类型是适合被合成的。当需要检查 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"Γ"),a("mo",null,"⊢"),a("mi",null,"x"),a("mo",null,":"),a("mi",null,"A")]),a("annotation",{encoding:"application/x-tex"},"\\Gamma \\vdash x : A")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord"},"Γ"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"⊢"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal"},"x"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord mathnormal"},"A")])])]),s(" 时，如果其中的 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"x")]),a("annotation",{encoding:"application/x-tex"},"x")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal"},"x")])])]),s(" 是适合类型合成的项，则会采取首先合成一个类型 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("msup",null,[a("mi",null,"A"),a("mo",{mathvariant:"normal",lspace:"0em",rspace:"0em"},"′")])]),a("annotation",{encoding:"application/x-tex"},"A'")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7519em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"A"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.7519em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"′")])])])])])])])])])])]),s("，再比较 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"A")]),a("annotation",{encoding:"application/x-tex"},"A")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord mathnormal"},"A")])])]),s(" 与 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("msup",null,[a("mi",null,"A"),a("mo",{mathvariant:"normal",lspace:"0em",rspace:"0em"},"′")])]),a("annotation",{encoding:"application/x-tex"},"A'")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7519em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"A"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.7519em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"′")])])])])])])])])])])]),s(" 是否相等。于是，我们需要定义类型的相等。在简单的类型系统中，类型的相等定义跟随之前所描述的类型检查相同的组合风格，即结构化的比较是否是由相同的类型构造子所构造，递归比较参数是否相等。在依赖类型论的定理证明器中，情况变得复杂：由于我们有对类型做语法抽象操作的能力（"),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"Π")]),a("annotation",{encoding:"application/x-tex"},"\\Pi")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord"},"Π")])])]),s("-types），我们需要处理非 closed term；由于在依赖类型论中，常常有形如 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"A"),a("mo",null,":"),a("mi",{mathvariant:"script"},"U")]),a("annotation",{encoding:"application/x-tex"},"A : \\mathcal U")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord mathnormal"},"A"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},":"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord mathcal",style:{"margin-right":"0.09931em"}},"U")])])]),s(" 的设定，我们在推演系统中无需为类型的相等添加新的 judgement，我们也可以定义类型上的函数，通过函数应用获得输出的类型。类型的相等定义变得非平凡，一个朴素的想法是我们可以比较已经被充分做 reduction 后的类型，或者说，进行 normalise 后的结果。")],-1),d=a("h3",{id:"evaluation",tabindex:"-1"},[s("Evaluation "),a("a",{class:"header-anchor",href:"#evaluation","aria-label":'Permalink to "Evaluation"'},"​")],-1),b=a("p",null,[s("论文 "),a("a",{href:"https://www.cambridge.org/core/books/abs/from-semantics-to-computer-science/simple-typetheoretic-language-minitt/21451A12E2E24A1F51C82421B066824A",target:"_blank",rel:"noreferrer"},"A simple type-theoretic language: Mini-TT"),s(" 为一般的依赖类型论语言/定理证明器提供了定义判断类型相等算法的思路，即 Normalisation by Evaluation（NbE）：语法域与语义域被分离，语法上的 open term 在语义中也有了对应的表示；操作 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"monospace"},"e"),a("mi",{mathvariant:"monospace"},"v"),a("mi",{mathvariant:"monospace"},"a"),a("mi",{mathvariant:"monospace"},"l")]),a("annotation",{encoding:"application/x-tex"},"\\mathtt{eval}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6111em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathtt"},"eval")])])])]),s(" 在给定的环境下将语法域元素映射到语义域，操作 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"monospace"},"r"),a("mi",{mathvariant:"monospace"},"e"),a("mi",{mathvariant:"monospace"},"a"),a("mi",{mathvariant:"monospace"},"d"),a("mi",{mathvariant:"monospace"},"b"),a("mi",{mathvariant:"monospace"},"a"),a("mi",{mathvariant:"monospace"},"c"),a("mi",{mathvariant:"monospace"},"k")]),a("annotation",{encoding:"application/x-tex"},"\\mathtt{readback}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6111em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathtt"},"readback")])])])]),s(" 将给定的自由变元集与语义域元素映射到语法域。求语法域元素的 normal form 即操作 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"monospace"},"e"),a("mi",{mathvariant:"monospace"},"v"),a("mi",{mathvariant:"monospace"},"a"),a("mi",{mathvariant:"monospace"},"l")]),a("annotation",{encoding:"application/x-tex"},"\\mathtt{eval}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6111em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathtt"},"eval")])])])]),s(" 与 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"monospace"},"r"),a("mi",{mathvariant:"monospace"},"e"),a("mi",{mathvariant:"monospace"},"a"),a("mi",{mathvariant:"monospace"},"d"),a("mi",{mathvariant:"monospace"},"b"),a("mi",{mathvariant:"monospace"},"a"),a("mi",{mathvariant:"monospace"},"c"),a("mi",{mathvariant:"monospace"},"k")]),a("annotation",{encoding:"application/x-tex"},"\\mathtt{readback}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6111em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathtt"},"readback")])])])]),s(" 的组合。注意这些操作都允许非 closed term 存在，由于我们有对类型做语法抽象操作的能力，比较 open terms 是否可相互转换是不可避免的。现在，我们可以定义一般的依赖类型论语言/定理证明器中类型的判断相等操作 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"monospace"},"c"),a("mi",{mathvariant:"monospace"},"o"),a("mi",{mathvariant:"monospace"},"n"),a("mi",{mathvariant:"monospace"},"v")]),a("annotation",{encoding:"application/x-tex"},"\\mathtt{conv}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathtt"},"conv")])])])]),s("。注意 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"monospace"},"c"),a("mi",{mathvariant:"monospace"},"o"),a("mi",{mathvariant:"monospace"},"n"),a("mi",{mathvariant:"monospace"},"v")]),a("annotation",{encoding:"application/x-tex"},"\\mathtt{conv}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathtt"},"conv")])])])]),s(" 不需要一个 term 达到 normal form，而只需要结构化地比较语义域元素元素是否相等。")],-1),y=t('<p>一个立方类型论的实现 <a href="https://github.com/mortberg/cubicaltt" target="_blank" rel="noreferrer">cubicaltt</a> 正是基于 Mini-TT 而作。</p><p>NbE 的语义基础参见 <a href="https://www.cse.chalmers.se/~abela/habil.pdf" target="_blank" rel="noreferrer">Normalization by Evaluation Dependent: Types and Impredicativity</a>。也有许多优秀的 NbE 实现教程，如 <a href="https://davidchristiansen.dk/tutorials/implementing-types-hs.pdf" target="_blank" rel="noreferrer">Checking Dependent Types with Normalization by Evaluation</a>、<a href="https://github.com/AndrasKovacs/elaboration-zoo" target="_blank" rel="noreferrer">Elaboration Zoo</a>。</p><h4 id="值的表示" tabindex="-1">值的表示 <a class="header-anchor" href="#值的表示" aria-label="Permalink to &quot;值的表示&quot;">​</a></h4>',3),x=a("p",null,[s("依赖类型论语言/定理证明器的 core terms 求值过程往往接近 untyped "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"λ")]),a("annotation",{encoding:"application/x-tex"},"\\lambda")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord mathnormal"},"λ")])])]),s("-calculus 的求值过程。 这是由于在通过类型检查后，类型的形成规则、引入规则、消除规则的出现都是符合类型系统规则的；且求值时，类型的形成规则、引入规则被翻译成语义域值的构造器，类型的消除规则被翻译为在被消除的项是值时计算出符合语义的结果、在被消除的项是 neutral terms 时构造更大的 neutral terms 的过程。从而，此处 core terms 的求值过程与 untyped "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"λ")]),a("annotation",{encoding:"application/x-tex"},"\\lambda")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord mathnormal"},"λ")])])]),s("-calculus 是接近的，但是如果要达到 normal form，在 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"monospace"},"r"),a("mi",{mathvariant:"monospace"},"e"),a("mi",{mathvariant:"monospace"},"a"),a("mi",{mathvariant:"monospace"},"d"),a("mi",{mathvariant:"monospace"},"b"),a("mi",{mathvariant:"monospace"},"a"),a("mi",{mathvariant:"monospace"},"c"),a("mi",{mathvariant:"monospace"},"k")]),a("annotation",{encoding:"application/x-tex"},"\\mathtt{readback}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6111em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathtt"},"readback")])])])]),s(" 时还需要按照类型信息将项变换到 canonical form。")],-1),w=a("p",null,[s("而 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"λ")]),a("annotation",{encoding:"application/x-tex"},"\\lambda")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord mathnormal"},"λ")])])]),s("-calculus 演算的各种求值策略与概念也被广泛研究。 在描述 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"λ")]),a("annotation",{encoding:"application/x-tex"},"\\lambda")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord mathnormal"},"λ")])])]),s("-calculus 的语义域时需要注意 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"λ")]),a("annotation",{encoding:"application/x-tex"},"\\lambda")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord mathnormal"},"λ")])])]),s(" term 的 body 是可能且常常出现捕获情况的，常用的处理如： 使用高阶抽象语法（HOAS）实现 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"λ")]),a("annotation",{encoding:"application/x-tex"},"\\lambda")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord mathnormal"},"λ")])])]),s("-calculus 将 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"λ")]),a("annotation",{encoding:"application/x-tex"},"\\lambda")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord mathnormal"},"λ")])])]),s(" terms 直接翻译为 host language 的函数对象（如匿名函数），higher-order 即是这里 host language 的函数；使用 closure 实现将 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"λ")]),a("annotation",{encoding:"application/x-tex"},"\\lambda")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mord mathnormal"},"λ")])])]),s(" terms 翻译为携带环境的 open term。对应的函数应用的实现是自然的。")],-1),k=t('<p>理论基础：<a href="https://www.brics.dk/RS/03/13/BRICS-RS-03-13.pdf" target="_blank" rel="noreferrer">A Functional Correspondence between Evaluators and Abstract Machines</a></p><p>参考实现：<a href="https://github.com/AndrasKovacs/elaboration-zoo" target="_blank" rel="noreferrer">Elaboration Zoo</a></p><p>目前依赖类型定理语言/证明器中较为标准的实现是 closure 表示的变体，这是由于</p><ul><li>object language 中函数相等的定义更容易表达</li><li>常用 host languages 中的函数对象无法序列化或打印</li><li>closure 实现更容易实现一些传统的编译器优化技术</li></ul><p>等原因。</p><h3 id="unification" tabindex="-1">Unification <a class="header-anchor" href="#unification" aria-label="Permalink to &quot;Unification&quot;">​</a></h3><p>易用的定理证明器应当允许用户省略一些类型标注、实例标注并提供自动参数和自动证明 absurd pattern 等功能。Typing、Unification、Pattern Matching、Typeclass Resolution 等环节都实现了一定的相关功能。</p><p>最简单的 unification 问题可以从这样的需求出发：我们希望用类型来引导程序的设计，未完成的程序被称为洞、有时我们想要省略一些类型标注、有时我们希望能使用策略来让定理证明的语言更加贴近自然的思维模式。<a href="https://www.manning.com/books/type-driven-development-with-idris" target="_blank" rel="noreferrer">Type-Driven Development with Idris</a></p>',8),v=a("p",null,[s("最简单的 unification 的问题是 pattern unification。考虑这样的例子：要求解等式 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",{stretchy:"false"},"?"),a("mi",null,"α"),a("mtext",null," "),a("mrow",null,[a("mi",{mathvariant:"normal"},"s"),a("mi",{mathvariant:"normal"},"p"),a("mi",{mathvariant:"normal"},"i"),a("mi",{mathvariant:"normal"},"n"),a("mi",{mathvariant:"normal"},"e")]),a("mo",null,"="),a("mrow",null,[a("mi",{mathvariant:"normal"},"R"),a("mi",{mathvariant:"normal"},"H"),a("mi",{mathvariant:"normal"},"S")])]),a("annotation",{encoding:"application/x-tex"},"?\\alpha\\ \\mathrm{spine} = \\mathrm{RHS}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),a("span",{class:"mclose"},"?"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),a("span",{class:"mspace"}," "),a("span",{class:"mord"},[a("span",{class:"mord mathrm"},"spine")]),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathrm"},"RHS")])])])]),s("，如果有")],-1),f=a("ul",null,[a("li",null,[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"s"),a("mi",{mathvariant:"normal"},"p"),a("mi",{mathvariant:"normal"},"i"),a("mi",{mathvariant:"normal"},"n"),a("mi",{mathvariant:"normal"},"e")]),a("annotation",{encoding:"application/x-tex"},"\\mathrm{spine}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8623em","vertical-align":"-0.1944em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathrm"},"spine")])])])]),s(" 由不同的受约变元组成")]),a("li",null,[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"R"),a("mi",{mathvariant:"normal"},"H"),a("mi",{mathvariant:"normal"},"S")]),a("annotation",{encoding:"application/x-tex"},"\\mathrm{RHS}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathrm"},"RHS")])])])]),s(" 中的自由变元都在 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"s"),a("mi",{mathvariant:"normal"},"p"),a("mi",{mathvariant:"normal"},"i"),a("mi",{mathvariant:"normal"},"n"),a("mi",{mathvariant:"normal"},"e")]),a("annotation",{encoding:"application/x-tex"},"\\mathrm{spine}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8623em","vertical-align":"-0.1944em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathrm"},"spine")])])])]),s(" 中")]),a("li",null,[s("元变元 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",{stretchy:"false"},"?"),a("mi",null,"α")]),a("annotation",{encoding:"application/x-tex"},"?\\alpha")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6944em"}}),a("span",{class:"mclose"},"?"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α")])])]),s(" 不在 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"R"),a("mi",{mathvariant:"normal"},"H"),a("mi",{mathvariant:"normal"},"S")]),a("annotation",{encoding:"application/x-tex"},"\\mathrm{RHS}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathrm"},"RHS")])])])]),s(" 出现")])],-1),M=t('<p>这样的 unification 问题求解相对较为简单，能求解的问题类别也相对受限。<a href="https://github.com/AndrasKovacs/elaboration-zoo/blob/master/03-holes/pattern-unification.txt" target="_blank" rel="noreferrer">Elaboration Zoo</a></p><p>更复杂的 unification 问题往往是不可判定的，如 higher-order unification。论文 <a href="https://www.lfcs.inf.ed.ac.uk/reports/91/ECS-LFCS-91-160/" target="_blank" rel="noreferrer">Unification of Simply Typed Lambda-Terms as Logic Programming</a> 指出了一些可判定的部分（也是 pattern unification 中 pattern 一词的来源，pattern fragment），并且陈述：</p><blockquote><p>The unification of simply typed λ-terms modulo the rules of β- and η-conversions is often called “higher-order” unification because of the possible presence of variables of functional type.</p></blockquote><blockquote><p>In order to avoid using the very vague and over used adjective “higher-order”, we shall refer to the problem of unifying simply typed λ-terms modulo β- and η-conversion as βη-unification.</p></blockquote><p>有关这类更复杂的 unification 问题参见 <a href="https://www.cse.chalmers.se/~abela/unif-sigma-long.pdf" target="_blank" rel="noreferrer">Higher-Order Dynamic Pattern Unification for Dependent Types and Records</a>。同时它也是 Agda 实现 unification 的理论参考。此外，一个有趣的原型参见 <a href="https://arxiv.org/abs/2204.05653" target="_blank" rel="noreferrer">Functional Pearl: Dependent type inference via free higher-order unification</a>。</p><h3 id="pattern-matching" tabindex="-1">Pattern Matching <a class="header-anchor" href="#pattern-matching" aria-label="Permalink to &quot;Pattern Matching&quot;">​</a></h3><p>当我们要归纳地去引入一个类型时 <a href="https://homotopytypetheory.org/book/" target="_blank" rel="noreferrer">Homotopy Type Theory, Remark 1.5.1. There is a general pattern for introduction of a new kind of type in type theory</a>，定义这个类型，也就是说：</p><ol><li>formation rules</li><li>introduction rules</li><li>elimination rules</li><li>computation rule</li><li>(optional) uniqueness principle</li></ol><p>例如，考虑我们如何定义自然数类型，并且使用这里定义的类型来定义新操作与证明操作相关的性质。(可以观察在 Coq 中 inductive 地声明一个 type 后，它自动生成了哪些定义)</p><p><a href="https://unimath.github.io/SymmetryBook/book.pdf" target="_blank" rel="noreferrer">Symmetry, 2.4 The type of natural numbers</a></p><p>直接使用 induction principle 来写定义与作证明相对比较繁琐，许多简明的形式也无法展现。 在 <a href="https://homotopytypetheory.org/book/" target="_blank" rel="noreferrer">Homotopy Type Theory,, 1.10 Pattern matching and recursion</a> 描述了一种简洁的记法，即模式匹配。</p><p>模式匹配是一系列机械化的方法，将定义等式翻译为类型的消除规则。但在实现上有多种候选，如 case tree 等。 在翻译定义等式的过程中也有一系列重要问题，如</p><ul><li>停机检查 <a href="https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.44.3494&amp;rank=1" target="_blank" rel="noreferrer">foetus – Termination Checker for Simple Functional Programs</a></li><li>覆盖检查</li><li>datatype indices 的 unification</li></ul><p>等。</p><p>理论基础：<a href="https://jesper.sikanda.be/files/thesis-final-digital.pdf" target="_blank" rel="noreferrer">Dependent pattern matching and proof-relevant unification</a></p><p>参考实现：<a href="https://github.com/edwinb/SPLV20" target="_blank" rel="noreferrer">Tiny Idris</a></p><h3 id="typeclass-resolution" tabindex="-1">Typeclass Resolution <a class="header-anchor" href="#typeclass-resolution" aria-label="Permalink to &quot;Typeclass Resolution&quot;">​</a></h3><p>理论基础：<a href="https://arxiv.org/abs/2001.04301" target="_blank" rel="noreferrer">Tabled Typeclass Resolution</a></p><h3 id="tactics-and-metaprogramming" tabindex="-1">Tactics and Metaprogramming <a class="header-anchor" href="#tactics-and-metaprogramming" aria-label="Permalink to &quot;Tactics and Metaprogramming&quot;">​</a></h3><p>论文 <a href="https://www.type-driven.org.uk/edwinb/papers/impldtp.pdf" target="_blank" rel="noreferrer">Idris, a General Purpose Dependently Typed Programming Language: Design and Implementation</a> 中描述了依赖类型定理语言/证明器的 IR 分层与基础 tactics 的实现。论文 <a href="https://www.type-driven.org.uk/edwinb/papers/elab-reflection.pdf" target="_blank" rel="noreferrer">Elaborator Reflection: Extending Idris in Idris</a> 是前篇论文的后续工作，此外在 <em>Related Work</em> 一节给出了有关 Tactics and Metaprogramming 相关其他工作的论述。</p><h2 id="经典的优化手段" tabindex="-1">经典的优化手段 <a class="header-anchor" href="#经典的优化手段" aria-label="Permalink to &quot;经典的优化手段&quot;">​</a></h2><h3 id="erasure" tabindex="-1">Erasure <a class="header-anchor" href="#erasure" aria-label="Permalink to &quot;Erasure&quot;">​</a></h3><p>有些 term 在运行时不需要具体的表示。一个经典的例子是 <a href="http://www.e-pig.org/downloads/indfam.pdf" target="_blank" rel="noreferrer">Inductive Families Need Not Store Their Indices</a>。</p><p>Idris 1 的编译器有判断 term 是否可以被 erasure 的机制 <a href="https://docs.idris-lang.org/en/latest/reference/erasure.html" target="_blank" rel="noreferrer">Erasure By Usage Analysis</a>。Idris 2 的类型系统加入了一些新的原语 <a href="https://arxiv.org/abs/2104.00480" target="_blank" rel="noreferrer">Idris 2: Quantitative Type Theory in Practice</a>。Agda 也提供了类似的标记机制 <a href="https://agda.readthedocs.io/en/latest/language/runtime-irrelevance.html" target="_blank" rel="noreferrer">Run-time Irrelevance</a>。</p><h3 id="incremental-reparse" tabindex="-1">Incremental Reparse <a class="header-anchor" href="#incremental-reparse" aria-label="Permalink to &quot;Incremental Reparse&quot;">​</a></h3><p>实现增量语法解析需要语法设计本身具有一些不变量，保证语法在一定单元内修改不会影响全局状态的合法性与解析结果不变。此外，选择合适的数据结构来表示语法树能使得修改操作相对低复杂度。<a href="https://docs.rs/rowan/latest/rowan/" target="_blank" rel="noreferrer">rowan</a></p><p>在定理证明器中常常出现 macros 或其他元编程类似物，在实现增量语法解析式也需要加以考虑。<a href="https://internals.rust-lang.org/t/macros-vs-incremental-parsing/9323" target="_blank" rel="noreferrer">Macros vs incremental parsing</a></p><h3 id="incremental-computation" tabindex="-1">Incremental Computation <a class="header-anchor" href="#incremental-computation" aria-label="Permalink to &quot;Incremental Computation&quot;">​</a></h3><p>许多传统语言编译器编译器被设计为 pass 构成的 pipeline。 交互式定理证明器有着编辑器交互性强、需要提供交互工具、常常需要增量计算修改、类型检查相对困难等特点。 在设计交互式定理证明器架构时就需要充分考虑到这些特点与困难。</p><p><a href="https://ollef.github.io/blog/posts/query-based-compilers.html" target="_blank" rel="noreferrer">Query-based compiler architectures</a></p><p><a href="https://rust-analyzer.github.io/blog/2023/07/24/durable-incrementality.html" target="_blank" rel="noreferrer">Durable Incrementality</a></p><h3 id="builtin" tabindex="-1">Builtin <a class="header-anchor" href="#builtin" aria-label="Permalink to &quot;Builtin&quot;">​</a></h3><p><a href="https://agda.readthedocs.io/en/latest/language/built-ins.html" target="_blank" rel="noreferrer">Agda Built-ins</a></p><p><a href="https://leanprover.github.io/lean4/doc/builtintypes.html" target="_blank" rel="noreferrer">Lean Builtin Types</a></p><h3 id="fbip" tabindex="-1">FBIP <a class="header-anchor" href="#fbip" aria-label="Permalink to &quot;FBIP&quot;">​</a></h3><p>Functional but in-place 是纯函数式语言在保持纯函数式的同时，为了高效表示状态的一种优化。同时，reuse analysis 也降低了模式匹配等操作的开销。</p><p><a href="https://www.microsoft.com/en-us/research/publication/perceus-garbage-free-reference-counting-with-reuse/" target="_blank" rel="noreferrer">Perceus: Garbage Free Reference Counting with Reuse</a></p><p><a href="https://www.microsoft.com/en-us/research/publication/fp2-fully-in-place-functional-programming-2/" target="_blank" rel="noreferrer">FP² : Fully in-Place Functional Programming</a></p><h3 id="glued-evaluation" tabindex="-1">Glued Evaluation <a class="header-anchor" href="#glued-evaluation" aria-label="Permalink to &quot;Glued Evaluation&quot;">​</a></h3><h3 id="compiling-with-continuations" tabindex="-1">Compiling with Continuations <a class="header-anchor" href="#compiling-with-continuations" aria-label="Permalink to &quot;Compiling with Continuations&quot;">​</a></h3><h3 id="typeclass-organisation" tabindex="-1">Typeclass Organisation <a class="header-anchor" href="#typeclass-organisation" aria-label="Permalink to &quot;Typeclass Organisation&quot;">​</a></h3><h3 id="algebra-tactics-optimisation" tabindex="-1">Algebra Tactics Optimisation <a class="header-anchor" href="#algebra-tactics-optimisation" aria-label="Permalink to &quot;Algebra Tactics Optimisation&quot;">​</a></h3><p>理论基础：<a href="https://drops.dagstuhl.de/opus/volltexte/2022/16738/" target="_blank" rel="noreferrer">Reflexive Tactics for Algebra, Revisited</a></p><p>参考实现：<a href="https://github.com/math-comp/algebra-tactics" target="_blank" rel="noreferrer">Algebra Tactics</a></p><h2 id="实现细节的技术选择" tabindex="-1">实现细节的技术选择 <a class="header-anchor" href="#实现细节的技术选择" aria-label="Permalink to &quot;实现细节的技术选择&quot;">​</a></h2><h3 id="variable" tabindex="-1">Variable <a class="header-anchor" href="#variable" aria-label="Permalink to &quot;Variable&quot;">​</a></h3><h3 id="universe" tabindex="-1">Universe <a class="header-anchor" href="#universe" aria-label="Permalink to &quot;Universe&quot;">​</a></h3><h3 id="proof-irrelevance" tabindex="-1">Proof Irrelevance <a class="header-anchor" href="#proof-irrelevance" aria-label="Permalink to &quot;Proof Irrelevance&quot;">​</a></h3>',48),N=[r,i,c,p,h,o,g,u,d,b,y,x,w,k,v,f,M];function _(L,T,A,q,P,R){return l(),e("div",null,N)}const E=n(m,[["render",_]]);export{S as __pageData,E as default};
